/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    java
    `java-library`
    idea
}

//java.sourceCompatibility = JavaVersion.VERSION_17

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

version = "1.2.1"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    flatDir {
        dirs("../LightSide")
//        dirs("/Users/rcmurray/git/LightSideWorkBench_2022-10-04/LightSide")
    }
    flatDir {
        dirs("../LightSide/lib")
    }
    flatDir {
        dirs("../LightSide/lib/plugins")
    }
    flatDir {
        dirs("lib")
    }

    maven {
        url = uri("https://raw.github.com/Deses/RiverLayout/mvn-repo/")
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.0.1-jre")
    implementation("edu.stanford.nlp:stanford-corenlp:3.9.2")
    implementation("edu.stanford.nlp:stanford-parser:3.9.2")
    implementation("se.datadosen.riverlayout:riverlayout:1.1")
    implementation("nz.ac.waikato.cms.weka:weka-stable:3.8.6")
    implementation("nz.ac.waikato.cms.weka:bayesianLogisticRegression:1.0.5")
    implementation("nz.ac.waikato.cms.weka:LibSVM:1.0.10")
    implementation("nz.ac.waikato.cms.weka:LibLINEAR:1.9.7")
    implementation("nz.ac.waikato.cms.weka:chiSquaredAttributeEval:1.0.4")
    implementation("com.oracle.database.xml:xmlparserv2:21.5.0.0")
    implementation("org.simpleframework:simple-http:6.0.1")
    implementation("org.simpleframework:simple:5.1.6")
    implementation("org.simpleframework:simple-transport:6.0.1")
    implementation("de.bwaldvogel:liblinear:2.44")
    implementation(":yeritools-min-1.0")
    implementation("junit:junit:4.13.2")

    implementation("tw.edu.ntu.csie:libsvm:3.31")
    implementation("org.apache.commons:commons-math3:3.6.1")
    implementation("org.hamcrest:hamcrest-core:2.2")
    implementation(":libsvm")
    implementation(":LightSide")
    implementation(files("../LightSide/LightSide.jar"))
    testRuntimeOnly(files("$projectDir/../LightSide/LightSide.jar"))
    testRuntimeOnly(files("../LightSide/LightSide.jar"))
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
//    options.compilerArgs.addAll(arrayOf(
//        "--add-exports", "java.base/java.util=ALL-UNNAMED"
//    ))
}

//tasks.test {
//    useJUnitPlatform()
//    testLogging {
//        events("passed", "skipped", "failed")
//    }
//}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit4 test framework
            useJUnit("4.13.2")
        }
    }
}

tasks.withType<Test>().all {
    jvmArgs("--add-opens=java.xml/com.sun.org.apache.xml.internal.serialize=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED")
}


